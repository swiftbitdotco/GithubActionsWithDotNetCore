name: Build and Test

on:
  workflow_dispatch: # manual trigger
  push:
    branches: [main]
  pull_request:
    branches: [main]

# https://stackoverflow.com/questions/58871955/sonarcloud-code-coverage-remains-0-0-in-github-actions-build
# todo:https://www.aaron-powell.com/posts/2020-01-10-deploying-azure-functions-with-github-actions/

env:
  OUTPUT_PATH: ${{ github.workspace }}/.output
  TEST_OUTPUT_PATH: ${{ github.workspace }}/.testoutput
  DOTNET_VERSION: 6.0.x
  USE_SONARQUBE: 1
  MIN_CODE_COVERAGE_PERCENTAGE: 70
  MAX_CODE_COVERAGE_PERCENTAGE: 80
  
  IS_MAIN_BRANCH: ${{ github.ref == 'refs/heads/main' }}
  IS_PR: ${{ github.event_name == 'pull_request' }}

  # @SEE: https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/automating-dependabot-with-github-actions
  IS_DEPENDABOT: ${{ github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]' }}

jobs:
  dotnet-sca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Nuget
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          source-url: ${{ env.NEWDAY_STRATUS_REPO }}
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.ORGANISATION_PAT }}

      - name: SCA scan job
        run: ./scripts/dotnet-sca/dotnet-sca.sh

  build-and-test:
    needs: [ dotnet-sca ]
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup Dotnet ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # --- vvv SonarQube Stuff vvv---
      - name: Setup JDK 11 for SonarQube
        if: env.USE_SONARQUBE == 1
        uses: actions/setup-java@v1
        with:
          java-version: 11
      # --- ^^^ SonarQube Stuff ^^^ ---

      - name: Clean
        run: dotnet clean --configuration Release && dotnet nuget locals all --clear

      - name: Restore
        run: dotnet restore #-s https://api.nuget.org/

      # --- vvv SonarQube Stuff vvv---
      - name: Cache SonarCloud packages
        if: env.USE_SONARQUBE == 1
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        if: env.USE_SONARQUBE == 1
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          dotnet tool install dotnet-sonarscanner -g

      - name: Start SonarQube
        if: env.USE_SONARQUBE == 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: |
          dotnet-sonarscanner begin /k:"swiftbitdotco_GithubActionsWithDotNetCore" /o:"swiftbitdotco" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
      # --- ^^^ SonarQube Stuff ^^^ ---

      - name: Build
        run: dotnet build --no-restore --configuration release

      - name: Test & collect Code Coverage
        run: ./scripts/dotnet-test/dotnet-test.sh

      # --- vvv SonarQube Stuff vvv---
      - name: Stop SonarQube
        if: env.USE_SONARQUBE == 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: |
          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      # --- ^^^ SonarQube Stuff ^^^ ---

      - name: Install dotnet-reportgenerator-globaltool locally
        run: |
          dotnet new tool-manifest
          dotnet tool install dotnet-reportgenerator-globaltool --local

      # https://danielpalme.github.io/ReportGenerator/usage
      - name: Create single Cobertura file for all Code Coverage Reports
        run: >-
          dotnet tool run reportgenerator 
          "-reports:TestResults/**/coverage.cobertura.xml" 
          "-targetdir:CodeCoverage" 
          -reporttypes:Cobertura 
          "-assemblyfilters:-*.Tests.*" 
          "-title:Github Actions with Dotnet Core" 
          -tag:${{ needs.setup.outputs.version }} 
      

      # https://danielpalme.github.io/ReportGenerator/usage
      - name: Create HTML Code Coverage Report
        run: >-
          dotnet tool run reportgenerator 
          "-reports:CodeCoverage/Cobertura.xml" 
          "-targetdir:CodeCoverageHtmlReport" 
          -reporttypes:HtmlInline 
          "-title:Contact Preferences" 
          -tag:${{ needs.setup.outputs.version }} 

      - name: Upload HTML Code Coverage Report to GitHub
        uses: actions/upload-artifact@v2
        with: 
          name: CodeCoverageHtmlReport
          path: CodeCoverageHtmlReport
          retention-days: 1

      # https://josh-ops.com/posts/github-code-coverage/
      # https://github.com/irongut/CodeCoverageSummary
      - name: Create Code Coverage Summary Report for Coverage PR Comment
        uses: irongut/CodeCoverageSummary@v1.2.0
        if: ${{ env.IS_PR }}
        with:
          filename: CodeCoverage/Cobertura.xml
          badge: true
          format: 'markdown'
          output: 'both'
          indicators: true
          fail_below_min: true
          thresholds: '${{ env.MIN_CODE_COVERAGE_PERCENTAGE}} ${{ env.MAX_CODE_COVERAGE_PERCENTAGE}}'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ env.IS_PR }}
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Get code coverage from xml (via pwsh)
        shell: pwsh
        run: |
          $XMLPath ="./CodeCoverage/Cobertura.xml";
          $xml=[xml](Get-Content $XMLPath);
          $lineRateStr=$xml.Coverage.'line-rate';
          $lineRate=([decimal]$lineRateStr * 100);
          $coverage=$lineRate.ToString("#.##")+'%';
          Write-Output $coverage;
          Write-Host "::set-output name=coverage::$coverage"
          
      - name: echo coverage output
        run: "echo coverage: ${{ steps.coverage.outputs.coverage }}"
      
      # NOTE: see https://github.com/Schneegans/dynamic-badges-action/#configuration for how this works
      - name: Create Code Coverage Badge into gist
        if: ${{ env.IS_MAIN_BRANCH }}
        uses: schneegans/dynamic-badges-action@v1.3.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: cea088c25f22bf1693d53565b0f4888c
          filename: main.json
          label: Code Coverage
          message: ${{ steps.coverage.outputs.coverage }}
          color: ${{ 
            steps.coverage.outputs.coverage >= env.MAX_CODE_COVERAGE_PERCENTAGE && 'brightgreen' || 
            steps.coverage.outputs.coverage >= env.MIN_CODE_COVERAGE_PERCENTAGE && 'yellow' ||
              'red' }}
